.TH "icmbuild" "1" "1992\-2017" "icmake\&.9\&.02\&.04\&.tar\&.gz" "Icmake\(cq\&s generic program maintenance facility"

.PP 
.SH "NAME"
icmbuild \- A generic, C++/C program maintenance facility
.PP 
.SH "SYNOPSIS"
\fIicmbuild\fP [\-h] [\-c] \fIargs\fP
.PP 
.SH "DESCRIPTION"

.PP 
\fIIcmbuild\fP is a small \fBC\fP program calling \fBicmake\fP(1) to do program maintenance
as defined in the \fIicmbuild\fP script that\(cq\&s (commonly) found in
\fI/usr/lib/icmake\fP\&.
.PP 
\fIIcmbuild\(cq\&s\fP actions are tailored through a configuration file (\fIicmconf\fP)
which must be present in the directory where program maintenance is
requested\&. This file is automatically installed by \fBicmstart\fP(1)\&. Refer to
\fBicmconf\fP(7)\(cq\&s man\-page for details about this file\&.
.PP 
\fIIcmbuild\fP assumes that your sources exist in and below the current working
directory\&. The file \fIicmconf\fP in \fBicmake\fP(1)\(cq\&s distribution provides an
example of an \fIicmconf\fP file that can be used by \fIicmbuild\fP\&. In that example
\fIicmconf\fP file it is assumed that \fBC++\fP sources are maintained, but
program maintenance for, e\&.g\&., \fBC\fP sources can easily be configured\&. If
\fIicmbuild\fP is called, but \fIicmconf\fP is not available it displays a usage\-summary
after which icm() ends\&.
.PP 
\fIIcmbuild\fP() handles the maintenance for all sources in each of the subdirectories
named in the file \fICLASSES\fP, and in addition the maintenance of all sources
in the current working directory\&. `Maintenance\(cq\& involves compiling all as yet
uncompiled source files, recompilation of modified source files, and
optionally library maintenance and the pre\-compilation of header files, which
commonly results in a marked reduction of source compilation times\&.
.PP 
When source files are compiled object modules are produced which may be stored
in a library, against which the object module of the program\(cq\&s \fImain\fP
function is linked\&. It is also possible to specify additional libraries
against which the program must be linked\&.
.PP 
If a library is constructed it is kept up to date by \fIicmbuild\fP\&. When a source is
successfully compiled its new object module replaces the old one that is found
in the library\&. At that point the separate object files are no longer required
and are removed by \fIicmbuild\fP\&.
.PP 
Up to \fIicmake\fP version 9\&.01\&.00 \fIicmbuild\fP was installed as an executable
\fIicmake\fP script in (commonly) \fI/usr/bin\fP\&. The dependency of this script on
the file \fIicmconf\fP made it difficult to provide usage information if
\fIicmconf\fP was absent\&. Since version 9\&.02\&.00 the \fIicmbuild\fP script has been
moved to (commonly) \fI/usr/lib/icmake\fP, and \fIicmbuild\fP now is a little
\fBC\fP program providing the usage information when necessary or requested, but
otherwise executes \fIicmake\fP to process the \fIicmbuild\fP script\&.
.PP 
.SH "KICK\-STARTING ICMBUILD"

.PP 
To use \fIicmbuild\fP do as follows:
.IP o 
Install \fIicmbuild\fP in your path (\fIicmake\(cq\&s\fP installation procedure
should already have taken care of that);
.IP o 
Copy \fIicmconf\fP (and probably a file \fICLASSES\fP) to your
project\(cq\&s base directory (i\&.e\&., the directory in which and where below
the project\(cq\&s sources are found)\&. Usually this has already been taken
care of by the \fIicmstart\fP script;

.PP 
Next:
.IP o 
Modify the \fI#defines\fP in the file \fIicmconf\fP to taste;
.IP o 
Enter the names of subdirectories containing sources on separate
lines in the file \fICLASSES\fP
.IP 
Note that the order of the classes mentioned in \fICLASSES\fP \fIis\fP
relevant in that new class (subdirectory) names can always be added at
the end of the file \fICLASSES\fP, but reordering the lines in the
\fICLASSES\fP file should be avoided\&. 
.IP 
If reordering is necessary, then first run the command \fIicmbuild
clean\fP to remove all files that were thus far created by
\fIicmbuild\fP\&. Recompilation is necessary as the names of the object files
contain class order\-numbers for identification\&.  These class\-order
numbers prevent file\-name collisions (e\&.g\&., two classes might use a
file \fIdata\&.cc\fP) and because of the number\-prefixes replacement of a
file \fIx\&.o\fP from class \fIA\fP by file \fIx\&.o\fP from class \fIB\fP is
prevented;
.IP o 
Start \fIicmbuild\fP\&.

.PP 
The next section covers \fIicmbuild\(cq\&s\fP  modes of operation\&.
.PP 
.SH "OPTIONS"

.PP 
\fIIcmbuild\fP supports two options, at most one should be specified:
.IP o 
\fI\-h\fP: Display a usage summary (also automatically shown when the
current directory does not contain a file \fIicmconf\fP);
.IP o 
\fI\-c\fP: Clear the screen (using \fItput clear\fP) before starting the
maintenance process\&.

.PP 
Next (after optionally specifying \fI\-c\fP) \fIicmbuild\fP can be provided with the
following arguments:
.IP o 
No arguments at all: 
if \fIicmconf\fP contains the line 
.nf 

    #define DEFCOM \(dq\&program\(dq\&
        
.fi 
then this is quivalent to the command \fIicmbuild\fP \fIprogram\fP;
.br 
if \fIicmconf\fP contains the line 
.nf 

    #define DEFCOM \(dq\&strip\(dq\&
        
.fi 
then this is quivalent to the command \fIicmbuild\fP \fIstrip\fP;
.br 
if if \fIicmconf\fP contains the line 
.nf 

    #define DEFCOM \(dq\&library\(dq\&
        
.fi 
then this is quivalent to the command \fIicmbuild\fP \fIlibrary\fP\&.
.br 
(these
commands are further elaborated in this section\&.)
\fIDEFCOM\fP specifications are ignored when an explicit argument is
passed to \fIicmbuild\fP\&.
.IP 
.IP o 
\fIclean\fP
.br 
clean up remnants of previous actions;
.IP 
.IP o 
\fIinstall program <path>\fP
.br 
install the constructed program in the specified \fI<path>\fP (to be used
after issuing \fIicmbuild\fP \fIprogram\fP, see below)\&. Example:
.nf 

    icmbuild install ~/bin/program
            
.fi 
This installs the constructed binary program in the user\(cq\&s \fIbin\fP
direcotry with the name \fIprogram\fP;
.IP 
.IP o 
\fIinstall static <path>\fP
.br 
install the constructed static library in the specified path (to be
used after issuing \fIicmbuild\fP \fIlibrary\fP, see below)\&. Example:
.nf 

    icmbuild static /usr/lib/
            
.fi 
This installs the constructed static library (e\&.g\&. \fIlibspecial\&.a\fP) in
\fI/usr/lib\fP as \fI/usr/lib/libspecial\&.a\fP\&.
.br 

.IP 
.IP o 
\fIinstall shared path\fP 
install the constructed shared library in the specified path (to be
used after issuing \fIicmbuild\fP \fIlibrary\fP), when \fIicmconf\fP defines
\fISHARED\fP (cf\&. \fBicmconf\fP(7))\&. Example:
.nf 

    icmbuild shared /usr/lib/
            
.fi 
This installs the constructed binary shared library
(e\&.g\&. \fIlibspecial\&.so\fP) in \fI/usr/lib\fP as
\fI/usr/lib/libspecial\&.so\fP\&. In addition, the soft\-links
.nf 

    libspecial\&.so \-> libspecial\&.so\&.X
    libspecial\&.so\&.X \-> libspecial\&.so\&.X\&.Y\&.Y\&.Z 
            
.fi 
are defined in \fI/usr/lib\fP, where \fIX\&.Y\&.Z\fP are the major, minor and
subminor versions defined in the file \fIVERSION\fP\&.
.IP 
.IP o 
\fIlibrary\fP
.br 
do library maintenance (builds a static and optionally (if \fIicmconf\fP
defines \fISHARED\fP) a shared (dynamic) library); 
.IP 
.IP o 
\fIprogram\fP
.br 
do program maintenance (builds a program from the sources in the
current working directory and from the sources in the directories
specified in the file \fICLASSES\fP);
.IP 
.IP o 
\fIprogram strip\fP
.br 
same as \fIprogram\fP, but the final program is stripped (using the
linker\(cq\&s \fI\-s\fP option);

.PP 
.SH "ICM\-DEP"

.PP 
Class dependencies are handled by \fIicmake\fP\(cq\&s support program
\fIicm\-dep\fP\&. It can be called from \fIicmake\fP by passing it the option
\fI\-d\fP\&. All options and arguments following \fI\-d\fP are forwared to
\fIicm\-dep\fP\&.
.PP 
The program \fIicm\-dep\fP is automatically called by \fIicmbuild\fP to handle
class dependencies\&. Consider two classes \fIOptions\fP and \fIProcess\fP\&. If
\fIProcess\fP uses \fIOptions\fP and if precompiled header files are used, then in
addition to \fIOption\(cq\&s\fP header file, \fIProcess\(cq\&s\fP header must also be
precompiled if \fIOption\(cq\&s\fP header file changes\&. Likewise, if \fIOption\(cq\&s\fP
data organization is changed and \fIOption\fP defines inline members used by
\fIProcess\fP or \fIProcess\fP defines an \fIOption\fP data member then, in addition
to \fIOption\(cq\&s\fP sources sources \fIProcess\(cq\&s\fP sources must also be
compiled\&. For the latter case \fIicmconf\fP uses the \fIUSE_ALL\fP specification:
if a \fI`USE_ALL\(cq\&\fP file exists in a directory, then all sources of that
directory are recompiled\&. 
.PP 
The program \fIicm_dep\fP determines all such class dependencies, and will
recompile class header files of all classes depending on classes whose header
files must be recompiled\&. Furthermore, if a \fI`USE_ALL\(cq\&\fP file exists in a
directory then all sources of classes depending on that directory\(cq\&s class are
also recompiled\&. 
.PP 
\fIIcm\-dep\(cq\&s\fP options are described in \fBicmake\fP(1)\(cq\&s man\-page\&.
.PP 
To start its work, \fIicm_dep\fP needs one command\-line argument:
\fIgo\fP\&. Any other argument results in \fIicm_dep\fP performing a `dry run\(cq\&: it
will perform all its duties (and verbose messages are displayed as if \fIgo\fP
had been specified), but no files (precompiled headers or \fIUSE_ALL\fP files)
will be touched or removed\&. If neither options nor arguments are specified
\fIicm_dep\fP writes its usage summary to the standard output\&.
.PP 
By default \fIicmbuild\fP calls \fIicmake \-d \-V go\fP: \fIicm_dep\fP is called to
perform its duties and to show its actions on the standard output stream\&. By
specifying a \fI#define ICM_DEP\fP parameter in the \fIicmconf\fP file this
default can be overruled (cf\&. \fBicmconf\fP(7))\&.
.PP 
.SH "FILES"

.PP 
The mentioned paths are sugestive only and may be installation dependent:
.IP o 
\fB/usr/share/icmake/icmconf\fP
Unabbreviated example of an \fIicmbuild\fP configuration file;
.IP o 
\fB/usr/share/icmake/CLASSES\fP
Example of an \fIicmbuild\fP \fICLASSES\fP file\&.

.PP 
.SH "EXAMPLES"

.PP 
Here is an example of the configuration file \fIicmconf\fP for a concrete
program, using facilities of the \fIbobcat\fP library:
.nf 

    #define CLS
    #define LIBRARY             \(dq\&modules\(dq\&
    #define MAIN                \(dq\&main\&.cc\(dq\&
    #define SOURCES             \(dq\&*\&.cc\(dq\&
    #define OBJ_EXT             \(dq\&\&.o\(dq\&
    #define SHAREDREQ           \(dq\&\(dq\&
    #define TMP_DIR             \(dq\&tmp\(dq\&
    #define USE_ALL             \(dq\&a\(dq\&
    #define USE_ECHO              ON
    #define CXX                 \(dq\&g++\(dq\&
    #define CXXFLAGS            \(dq\& \-\-std=c++14 \-Wall \-O2 \-pthread\(dq\& \(dq\& \-fdiagnostics\-color=never \(dq\&
    #define IH                  \(dq\&\&.ih\(dq\&
    #define PRECOMP             \(dq\&\-x c++\-header\(dq\&
    #define REFRESH
    #define LDFLAGS             \(dq\&\(dq\&
    #define ADD_LIBRARIES       \(dq\&bobcat\(dq\&
    #define ADD_LIBRARY_PATHS   \(dq\&\(dq\&
    
    #define DEFCOM              \(dq\&program\(dq\&
        
.fi 

.PP 
.SH "SEE ALSO"
\fBicmake\fP(1), \fBicmconf\fP(7), \fBicmstart\fP(1), \fBicmstart\&.rc\fP(7)
.PP 
.SH "BUGS"
None reported
.PP 
.SH "COPYRIGHT"
This is free software, distributed under the terms of the 
GNU General Public License (GPL)\&.
.PP 
.SH "AUTHOR"
Frank B\&. Brokken (\fBf\&.b\&.brokken@rug\&.nl\fP)\&.
.PP 
